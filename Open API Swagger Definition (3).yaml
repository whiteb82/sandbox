openapi: 3.0.0
info:
  description: Linx Sample API
  version: 1.0.0
  title: Linx Sample API
paths:
  /helloworld:
    get:
      summary: Return the text 'Hello World!'
      description: Return the text 'Hello World!'
      operationId: HelloWorld
      responses:
        '200':
          description: OK (200)
          content:
            application/json:
              schema:
                 type: string
  /me:
    get:
      summary: Retrieve the properties of user object for the signed in user.
      description: Retrieve the properties of user object for the signed in user
      tags:
        - User and Authentication
      security:
        - Token: []
        
      operationId: GetCurrentUser
      responses:
        '200':
          description: OK (209)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized (401)
  /users:
    post:
      summary: Register a new user
      description: Register a new user
      tags:
        - User and Authentication
      security:
        - Token: []
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserRequest'
        description: Details of the new user to register
        required: true
      responses:
        '201':
          description: Created(201)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized (401)
        '400':
          description: Bad Request (400)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
    get:
      summary: List users
      description: List users
      tags:
        - User and Authentication
      security:
        - ApiKeyAuth_query: []
       
      operationId: ListUsers
      parameters:
        - name: name
          in: query
          description: User full name
          schema:
            type: string
        - name: email
          in: query
          description: User email address
          schema:
            type: string
          
      responses:
        '200':
          description: OK (200)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: Unauthorized (401)
        '422':
          description: Unexpected error (422)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'

  /users/{id}:
    delete:
      summary: Delete a user
      description: Delete a user
      tags:
        - User and Authentication
      security:
        - Token: []
      operationId: DeleteUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '204':
          description: No Content (204)
        '401':
          description: Unauthorized (401)
        '404':
          description: Not found (404)
        '422':
          description: Unexpected error (422)
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'    
      
    get:
      summary: Get current user
      description: Gets the currently logged-in user
      tags:
        - User and Authentication
      security:
        - Token: []
      operationId: GetUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK (200)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized (401)
        '404':
          description: Not found (404)
        '422':
          description: Unexpected error (422)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'   
    patch:
      summary: Update a user
      description: Updated user information for a user
      tags:
        - User and Authentication
      security:
        - Token: []
      operationId: UpdateUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        description: User details to update. At least **one** field is required.
        required: true
      responses:
        '204':
          description: No Content (204)
        '401':
          description: Unauthorized (401)
        '404':
          description: Not found (404)
        '422':
          description: Unexpected error (422)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
  /users/{id}/photo:
    put:
      summary: send file
      description: Upload profile picture
      operationId: UploadPhoto
      tags:
        - Files
      security:
        - Token: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
          content:
            application/octet-stream:    # Can be image/png, image/svg, image/gif, etc.
              schema:
                type: string
                format: binary
          required: true

      responses:
        '200':
          description: OK (209)
          content:
            application/json:
              schema:
               type: string
        '401':
          description: Unauthorized (401)

        '404':
          description: Not found (404)

    get:
      summary: Recieve File
      description:  Recieve File
      operationId: DownloadPhoto
      tags:
        - Files
      security:
        - Token: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK (209)
          content:
            application/octet-stream:    # Can be image/png, image/svg, image/gif, etc.
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized (401)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
        '404':
          description: Not found (404)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorModel'
                
  /users/token:
    post:
      summary: Register new JWT token
      description:  Register new JWT token
      tags:
        - User and Authentication
      security:
        - BasicAuth: []
      operationId: GenerateUserToken
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
                
components:
#Secuirty shemes available to appy to methods
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    Token:
      type: http
      scheme: bearer
    ApiKeyAuth_query:
      type: apiKey
      in: query
      name: X-API-Key
    ApiKeyAuth_header:
      type: apiKey
      in: header
      name: X-API-Key
    ApiKeyAuth_cookie:
      type: apiKey
      in: cookie
      name: X-API-Key
    
            
  #Objects used in requests, responses
  schemas:
    NewUser:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
        firstname:
          type: string
        lastname:
          type: string
      required:
        - username
          email
          password
          firstname
          lastname
    NewUserRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/NewUser'
      required:
        - user
    User:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
      required:
        - email
        - username
    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
    UpdateUser:
      type: object
      properties:
        email:
          type: string
         
        firstname:
          type: string
        lastname:
          type: string
    Users:
      type: array
      items:
            $ref: '#/components/schemas/User'
    UpdateUserRequest:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UpdateUser'
      required:
        - user
    Token:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        token_type:
          type: string
    GenericErrorModel:
      type: object
      properties:
        summary:
          type: string
        errors:
              type: array
              items:
                type: string

      required:
        - errors
